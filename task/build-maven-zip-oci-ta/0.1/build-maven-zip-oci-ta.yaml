---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: build-maven-zip-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: maven-build, konflux
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: maven-zip
spec:
  description: |-
    Build-maven-zip task builds prefetched maven artifacts into a OCI-artifact with zip bundle  and pushes the OCI-artifact into container registry.
    In addition it will use the SBOM file in prefetch-task, pushes the SBOM file to same registry of zip oci-artifact using cosign tool.
    Note that this task needs the output of prefetch-dependencies task. If it is not activated, there will not be any output from this task.
  params:
    - name: input
      description: The Hermeto lockfile containing artifacts fetched.
      type: string
      default: ""
    - name: CACHI2_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the prefetched dependencies.
      type: string
      default: ""
    - name: IMAGE
      description: Reference of the OCI-Artifact this build task will produce.
      type: string
    - name: IMAGE_EXPIRES_AFTER
      description: Delete image tag after specified time. Empty means to keep
        the image tag. Time values could be something like 1h, 2d, 3w for
        hours, days, and weeks, respectively.
      type: string
      default: ""
    - name: PREFETCH_ROOT
      description: The root directory of the artifacts under the prefetched
        directory. Will be kept in the maven zip as the top directory for
        all artifacts.
      type: string
      default: maven-repository
    - name: caTrustConfigMapKey
      description: The name of the key in the ConfigMap that contains the
        CA bundle data.
      type: string
      default: ca-bundle.crt
    - name: caTrustConfigMapName
      description: The name of the ConfigMap to read CA bundle data from.
      type: string
      default: trusted-ca
  results:
    - name: IMAGE_DIGEST
      description: Digest of the OCI-Artifact just built
    - name: IMAGE_REF
      description: OCI-Artifact reference of the built OCI-Artifact
    - name: IMAGE_URL
      description: OCI-Artifact repository and tag where the built OCI-Artifact
        was pushed
    - name: SBOM_BLOB_URL
      description: Reference of SBOM blob digest to enable digest-based verification
        from provenance
      type: string
  volumes:
    - name: shared
      emptyDir: {}
    - name: trusted-ca
      configMap:
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        name: $(params.caTrustConfigMapName)
        optional: true
    - name: workdir
      emptyDir: {}
  stepTemplate:
    env:
      - name: INPUT
        value: $(params.input)
      - name: IMAGE
        value: $(params.IMAGE)
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.IMAGE_EXPIRES_AFTER)
      - name: PKG_ROOT
        value: $(params.PREFETCH_ROOT)
    volumeMounts:
      - mountPath: /shared
        name: shared
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/konflux-ci/build-trusted-artifacts:latest@sha256:98641d6162ee305d09927a87c7c8245a77bffb0061aef6ed18f14c1348a77d07
      args:
        - use
        - $(params.CACHI2_ARTIFACT)=/var/workdir/cachi2
    - name: check-artifact
      image: quay.io/konflux-ci/yq:latest@sha256:7ef2e2f76ca36bdc7eb9203df31f3bce546d1267b969d9bd2691094b88610dbb
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -euo pipefail
        pkgpath="/var/workdir/cachi2/output/deps/generic/${PKG_ROOT}"
        mkdir -p "/var/workdir/${PKG_ROOT}"
        if [ "$(find "$pkgpath" -mindepth 1 -print -quit 2>/dev/null)" ]; then
          cd pkgpath
          files_to_check=$(yq -r '.artifacts[].filename' <<< "$INPUT")

          missing_files=()
          for file in $files_to_check; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            else
              mv -v "$file" "/var/workdir/${PKG_ROOT}"
            fi
          done

          if [ ${#missing_files[@]} -ne 0 ]; then
            echo "file(s) below are missing from Hermeto Lockfile:"
            printf ' - %s\n' "${missing_files[@]}"
            exit 1
          fi
        else
          echo "No file in ${PKG_ROOT} dir, no artifacts detected"
          exit 1
        fi
      computeResources:
        limits:
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 256Mi
      securityContext:
        capabilities:
          add:
            - SETFCAP
    - name: build
      image: quay.io/konflux-ci/oras:latest@sha256:4542f5a2a046ca36653749a8985e46744a5d2d36ee10ca14409be718ce15129e
      workingDir: /var/workdir
      volumeMounts:
        - mountPath: /mnt/trusted-ca
          name: trusted-ca
          readOnly: true
      script: |
        #!/bin/bash
        set -euo pipefail
        select-oci-auth "$IMAGE" >auth.json
        [ -n "$IMAGE_EXPIRES_AFTER" ] && EXPIRE_LABEL=("--annotation" "quay.expires-after=$IMAGE_EXPIRES_AFTER")
        echo "Pushing image ${IMAGE} to registry"
        cd "${PKG_ROOT}"

        files_to_push=$(yq -r '.artifacts[] | select(.filename | test(".(zip|tgz|tar.gz)$")) | .filename' <<< "$INPUT")
        case $(echo "$files_to_push" | head -n 1) in
          *.zip)
            PACKAGE_TYPE="maven+zip"
            ;;
          *.tgz|*.tar.gz)
            PACKAGE_TYPE="npm+tgz"
            ;;
        esac

        for file in $files_to_push; do
          temp_dir=$(mktemp -d)
          case "$file" in
            *.zip)
              if [ "$PACKAGE_TYPE" = "maven+zip" ]; then
                  unzip -q "$file" -d "$temp_dir"
                  if find "$temp_dir" -name "pom.xml" -print -quit | grep -q "."; then
                    :
                  else
                    PACKAGE_TYPE="Unknown"
                    rm -rf "$temp_dir"
                    break
                  fi
              else
                PACKAGE_TYPE="Unknown"
                rm -rf "$temp_dir"
                break
              fi
              ;;
            *.tgz|*.tar.gz)
              if [ "$PACKAGE_TYPE" = "npm+tgz" ]; then
                tar -xzf "$file" -d "$temp_dir"
                if find "$temp_dir" -name "package.json" -print -quit | grep -q "."; then
                  :
                else
                  PACKAGE_TYPE="Unknown"
                  rm -rf "$temp_dir"
                  break
                fi
              else
                PACKAGE_TYPE="Unknown"
                rm -rf "$temp_dir"
                break
              fi
              ;;
          esac
          rm -rf "$temp_dir"
        done

        if [ "$PACKAGE_TYPE" != "Unknown" ]; then
          if ! retry oras push "$IMAGE" \
            --registry-config auth.json \
            "${EXPIRE_LABEL[@]}" \
            --artifact-type application/vnd."$PACKAGE_TYPE" "$files_to_push"; then
            echo "Failed to push image ${IMAGE} to registry"
          fi
        else
          echo "Input containing invalid artifacts"
          exit 1
        fi

        if ! RESULTING_DIGEST=$(retry oras resolve --registry-config auth.json "${IMAGE}"); then
          echo "Failed to get digest for ${IMAGE} from registry"
          exit 1
        fi
        echo -n "$IMAGE" | tee "$(results.IMAGE_URL.path)"
        echo -n "$RESULTING_DIGEST" | tee "$(results.IMAGE_DIGEST.path)"
        echo -n "${IMAGE}@${RESULTING_DIGEST}" | tee "$(results.IMAGE_REF.path)"
      computeResources:
        limits:
          memory: 8Gi
        requests:
          cpu: "1"
          memory: 2Gi
      securityContext:
        capabilities:
          add:
            - SETFCAP
    - name: save-sbom
      image: quay.io/konflux-ci/mobster:0.6.0-1755613650@sha256:41e877cac3bda4ae5b8a59bbb8241e6f56dc18750476e6ce979264de161516dc
      workingDir: /var/workdir
      volumeMounts:
        - mountPath: /mnt/trusted-ca
          name: trusted-ca
          readOnly: true
      script: |
        #!/bin/bash
        set -euo pipefail

        IMAGE_URL="$(cat "$(results.IMAGE_URL.path)")"
        IMAGE_DIGEST="$(cat "$(results.IMAGE_DIGEST.path)")"

        # Use Mobster to generate maven-zip SBOM file using the Hermeto (Cachi2) output
        if [ -f "/var/workdir/cachi2/output/bom.json" ]; then
          mobster generate \
            --output sbom.json \
            oci-image \
            --from-hermeto "/var/workdir/cachi2/output/bom.json" \
            --image-pullspec "$IMAGE_URL" \
            --image-digest "$IMAGE_DIGEST"
        else
          echo "The SBOM file for fetched artifacts is not found!"
          exit 1
        fi
      computeResources:
        limits:
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 256Mi
      securityContext:
        capabilities:
          add:
            - SETFCAP
    - name: upload-sbom
      image: quay.io/konflux-ci/appstudio-utils:1610c1fc4cfc9c9053dbefc1146904a4df6659ef@sha256:90ac97b811073cb99a23232c15a08082b586c702b85da6200cf54ef505e3c50c
      workingDir: /var/workdir
      volumeMounts:
        - mountPath: /mnt/trusted-ca
          name: trusted-ca
          readOnly: true
      script: |
        #!/bin/bash
        set -euo pipefail
        ca_bundle=/mnt/trusted-ca/ca-bundle.crt
        if [ -f "$ca_bundle" ]; then
          echo "INFO: Using mounted CA bundle: $ca_bundle"
          cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
          update-ca-trust
        fi

        if jq -e '.bomFormat == "CycloneDX"' <sbom.json >/dev/null; then
          sbom_type=cyclonedx
        else
          sbom_type=spdx
        fi

        echo "Pushing sbom to registry"
        if ! retry cosign attach sbom --sbom sbom.json --type "$sbom_type" "$IMAGE"; then
          echo "Failed to push sbom to registry"
          exit 1
        fi

        # Remove tag from IMAGE while allowing registry to contain a port number.
        sbom_repo="${IMAGE%:*}"
        sbom_tag="sha256-$(                                <"$(results.IMAGE_DIGEST.path)" cut -d: -f2).sbom"
        # The SBOM_BLOB_URL is created by `cosign attach sbom`.
        echo -n "${sbom_repo}:${sbom_tag}" | tee "$(results.SBOM_BLOB_URL.path)"
      computeResources:
        limits:
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 256Mi
